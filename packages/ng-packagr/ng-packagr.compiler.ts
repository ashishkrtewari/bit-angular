import { ParsedConfiguration, CompilerOptions as TsCompilerOptions } from '@angular/compiler-cli';
import { BuildContext, BuiltTaskResult, ComponentResult } from '@teambit/builder';
import { Compiler, CompilerOptions, TranspileComponentParams } from '@teambit/compiler';
import { Component } from '@teambit/component';
import PackageJsonFile from '@teambit/legacy/dist/consumer/component/package-json-file';
import AbstractVinyl from '@teambit/legacy/dist/consumer/component/sources/abstract-vinyl';
import DataToPersist from '@teambit/legacy/dist/consumer/component/sources/data-to-persist';
import removeFilesAndEmptyDirsRecursively from '@teambit/legacy/dist/utils/fs/remove-files-and-empty-dirs-recursively';
import { Logger } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { extname, join, posix, resolve } from 'path';

export interface NgPackagr {
  /**
   * Sets the path to the user's "ng-package" file (either `package.json`, `ng-package.json`, or `ng-package.js`)
   *
   * @param project File path
   * @return Self instance for fluent API
   */
  forProject(project: string): NgPackagr;
  /**
   * Overwrites the default TypeScript configuration.
   *
   * @param defaultValues A tsconfig providing default values to the compilation.
   * @return Self instance for fluent API
   */
  withTsConfig(defaultValues: ParsedConfiguration | string): NgPackagr;
  /**
   * Builds the project by kick-starting the 'build' transform over an (initially) empty `BuildGraph``
   *
   * @return A promisified result of the transformation pipeline.
   */
  build(): Promise<void>;
}

const ViewEngineTemplateError = "Cannot read property 'type' of null";

export class NgPackagrCompiler implements Compiler {
  displayName = 'NgPackagr compiler';
  distDir: string;
  distGlobPatterns: string[];
  shouldCopyNonSupportedFiles: boolean;
  artifactName: string;

  constructor(
    readonly id: string,
    private ngPackagr: NgPackagr,
    private logger: Logger,
    private workspace: Workspace,
    private readDefaultTsConfig: (filename?: string) => any,
    // TODO(ocombe): use this to support custom tsConfig
    private tsCompilerOptions: TsCompilerOptions = {},
    private bitCompilerOptions: Partial<CompilerOptions> = {}
  ) {
    this.distDir = bitCompilerOptions.distDir || 'dist';
    this.distGlobPatterns = bitCompilerOptions.distGlobPatterns || [`${this.distDir}/**`];
    this.shouldCopyNonSupportedFiles =
      typeof bitCompilerOptions.shouldCopyNonSupportedFiles === 'boolean' ? bitCompilerOptions.shouldCopyNonSupportedFiles : true;
    this.artifactName = bitCompilerOptions.artifactName || 'dist';
  }

  private async ngPackagrCompilation(pathToComponent: string, pathToOutputFolder: string, tsCompilerOptions: TsCompilerOptions): Promise<void> {
    // disable logger temporarily so that it doesn't mess up with ngPackagr logs
    this.logger.off();

    // update ngPackage entry in package.json for ngPackagr
    const packageJson = await PackageJsonFile.load(pathToOutputFolder, '');
    packageJson.addOrUpdateProperty('ngPackage', {
      lib: {
        entryFile: join(pathToComponent, 'public-api.ts'),
      },
    });
    await packageJson.write();

    const parsedTsConfig = this.readDefaultTsConfig();
    parsedTsConfig.options = {...parsedTsConfig.options, ...tsCompilerOptions};

    return this.ngPackagr
      .withTsConfig(parsedTsConfig)
      .forProject(join(pathToOutputFolder, 'package.json'))
      .build()
      .then(async () => {
        // copy over properties generated by ngPackagr
        const tempPackageJson = (await PackageJsonFile.load(pathToOutputFolder, this.distDir)).packageJsonObject;
        packageJson.mergePackageJsonObject({
          main: posix.join(this.distDir, tempPackageJson.main),
          module: posix.join(this.distDir, tempPackageJson.module),
          es2015: posix.join(this.distDir, tempPackageJson.es2015),
          esm2015: posix.join(this.distDir, tempPackageJson.esm2015),
          fesm2015: posix.join(this.distDir, tempPackageJson.fesm2015),
          typings: posix.join(this.distDir, tempPackageJson.typings),
          metadata: posix.join(this.distDir, tempPackageJson.metadata),
          sideEffects: tempPackageJson.sideEffects === 'true',
          ngPackage: undefined,
        });
        await packageJson.write();
        // delete the package.json file generated by ngPackagr
        await removeFilesAndEmptyDirsRecursively([resolve(join(pathToOutputFolder, 'dist', 'package.json'))]);
      }, (err: Error) => {
        if(err.message === ViewEngineTemplateError && !tsCompilerOptions.fullTemplateTypeCheck) {
          console.warn(`\nError "${err.message}" triggered by the Angular compiler, retrying compilation without "fullTemplateTypeCheck" (you should probably create a custom environment using "bit create ng-env my-custom-angular-env" to set this option by default and avoid this error message)\n`);
          return this.ngPackagrCompilation(pathToComponent, pathToOutputFolder, {...tsCompilerOptions, fullTemplateTypeCheck: false})
        }
        console.error(err);
      })
      .finally(() => {
        this.logger.on();
      });
  }

  /**
   * used by `bit compile`
   */
  async transpileComponent(params: TranspileComponentParams): Promise<void> {
    return this.ngPackagrCompilation(params.componentDir, params.outputDir, this.tsCompilerOptions);
  }

  private getArtifactDefinition() {
    return [
      {
        generatedBy: this.id,
        name: this.artifactName,
        globPatterns: this.distGlobPatterns,
      },
    ];
  }

  /**
   * used by `bit build`
   */
  async build(context: BuildContext): Promise<BuiltTaskResult> {
    const capsules = context.capsuleNetwork.seedersCapsules;
    const componentsResults: ComponentResult[] = [];

    await Promise.all(
      context.components.map(async (component: Component) => {
        const capsule = capsules.getCapsule(component.id);
        if (!capsule) {
          throw new Error(`No capsule found for ${component.id} in network graph`);
        }
        const currentComponentResult: ComponentResult = {
          component,
        };
        try {
          await this.ngPackagrCompilation(capsule.path, capsule.path, this.tsCompilerOptions);
        } catch (e) {
          currentComponentResult.errors = [e];
        }

        if (this.shouldCopyNonSupportedFiles) {
          const dataToPersist = new DataToPersist();
          capsule.component.filesystem.files.forEach((file: AbstractVinyl) => {
            if (!this.isFileSupported(file.path)) {
              dataToPersist.addFile(file);
            }
          });
          dataToPersist.addBasePath(join(capsule.path, this.distDir));
          await dataToPersist.persistAllToFS();
        }

        componentsResults.push({ ...currentComponentResult });
      })
    );

    return {
      artifacts: this.getArtifactDefinition(),
      componentsResults,
    };
  }

  /**
   * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js
   * used by `bit build`
   */
  getDistPathBySrcPath(srcPath: string): string {
    // we use the typescript compiler, so we just need to return the typescript src file path
    return srcPath;
  }

  /**
   * whether ngPackagr is able to compile the given path
   */
  isFileSupported(filePath: string): boolean {
    return filePath.endsWith('.ts') || (!!this.tsCompilerOptions.allowJs && filePath.endsWith('.js'));
  }

  private replaceFileExtToJs(filePath: string): string {
    if (!this.isFileSupported(filePath)) return filePath;
    const fileExtension = extname(filePath);
    return filePath.replace(new RegExp(`${fileExtension}$`), '.js'); // makes sure it's the last occurrence
  }

  version(): string {
    // eslint-disable-next-line global-require
    return require('ng-packagr/package.json').version;
  }
}
